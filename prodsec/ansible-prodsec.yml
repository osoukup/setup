# RH PS work setup playbook
#
#   ansible-prodsec.yml
---
- name: prodsec setup
  hosts: all
  tasks:
    - name: check mandatory variables are defined
      assert:
        that:
          - user is defined

    - name: create ~/prodsec
      file:
        path: "/home/{{ user }}/prodsec"
        state: directory
      become_user: "{{ user }}"

    - name: setup prodsec aliases
      blockinfile:
        path: "/home/{{ user }}/.bashrc"
        marker: "# {mark} prodsec ANSIBLE MANAGED BLOCK"
        block: |
          # OSIDB
          alias osidb-restart-celery="podman container restart celery_host1 celery_host2 celery_beat"
          alias osidb-source="source ~/prodsec/osidb/.env ; source ~/prodsec/osidb/venv/bin/activate"
          osidb-shell() {
            osidb-source
            export OSIDB_DB_PORT=$(podman port osidb-data | awk -F ':' '/5432/ { print $2 }')
            python ~/prodsec/osidb/manage.py shell --settings=config.settings_shell
            deactivate
          }
          alias osidb-token-local="source ~/data/tools/osidbtoken ; osidbtoken local"
          alias osidb-token-prod="source ~/data/tools/osidbtoken ; osidbtoken prod"
          alias osidb-token-stage="source ~/data/tools/osidbtoken ; osidbtoken stage"
          # SFM2
          export SFM2_SERVER_CONFIG=~/prodsec/sfm2/instance/development.ini
          alias sfm2-db="sqlitebrowser ~/prodsec/sfm2/instance/sfm2-database.sqlite"
          alias sfm2-db-clear="rm ~/prodsec/sfm2/instance/sfm2-database.sqlite"
          alias sfm2-shell="(sfm2-source && python ~/prodsec/sfm2/sfm2/shell.py)"
          alias sfm2-source="source ~/prodsec/sfm2/venv/bin/activate ; source ~/prodsec/sfm2/cli/sfm2-completion.bash"
          alias sfm2-activate="~/data/tools/sfm2-activate.sh"
          alias sfm2-deactivate="~/data/tools/sfm2-deactivate.sh"
          alias sfm2-instance-switch="~/data/tools/instance-switch.sh"
          alias sfm2-server="(sfm2-source && sfm-server --log-level=debug)"
          alias sfm2-taskd="(sfm2-source && sfm-taskd --debug)"
          alias sfm2-log-server="(less +F ~/prodsec/sfm2/instance/logs/sfm2-server.log)"
          alias sfm2-log-taskd="(less +F ~/prodsec/sfm2/instance/logs/sfm2-taskd.log)"
          alias sfm2-log-gunicorn="(less +F ~/prodsec/sfm2/instance/logs/gunicorn-error.log)"

    # setup VPN
    - name: install NetworkManager-openvpn
      dnf:
        name: NetworkManager-openvpn
        state: present
    - name: install NetworkManager-openvpn-gnome
      dnf:
        name: NetworkManager-openvpn-gnome
        state: present
    - name: install redhat-internal-cert
      dnf:
        name: "https://hdn.corp.redhat.com/rhel8-csb/RPMS/noarch/redhat-internal-cert-install-0.1-25.el7.noarch.rpm"
        state: present
    - name: import RHEL8 RPM GPG KEY
      rpm_key:
        key: "https://hdn.corp.redhat.com/rhel8-csb/RPM-GPG-KEY-helpdesk"
        state: present
    - name: install redhat-internal-NetworkManager-openvpn-profiles
      dnf:
        name: redhat-internal-NetworkManager-openvpn-profiles
        enablerepo: "https://hdn.corp.redhat.com/rhel8-csb/rhel8-csb.repo"
        state: present

    # setup Kerberos
    - name: install krb5-workstation
      dnf:
        name: krb5-workstation
        state: present
    - name: setup Kerberos config
      copy:
        src: "/home/{{ user }}/data/config/krb5.conf"
        dest: "/etc/krb5.conf"
        mode: "0644"

    - name: add staging Jira redirection
      lineinfile:
        path: /etc/hosts
        line: "10.24.129.4 sso.stage.jboss.org"
        insertbefore: "127.0.0.1.*"
        state: present

    - name: install git
      dnf:
        name: git
        state: present

    - name: setup prodsec repositories
      block:
        # TODO key authentication does not work
        - name: clone cee repo to dir
          git:
            repo: "git@gitlab.cee.redhat.com:{{ item.dir }}/{{ item.rep }}.git"
            dest: "/home/{{ user }}/prodsec/{{ item.rep }}"
            accept_hostkey: yes
            key_file: "/home/{{ user }}/.ssh/id_rsa"
          become_user: "{{ user }}"
          loop:
            - rep: "dashboard"
              dir: "prodsec-dev"
            - rep: "prodsec"
              dir: "prodsec-dev"
            - rep: "product-definitions"
              dir: "prodsec"
            - rep: "ps-constants"
              dir: "prodsec-dev"
            - rep: "sfm2"
              dir: "prodsec-dev"
        - name: clone corp repo to dir
          git:
            repo: "git@gitlab.corp.redhat.com/product-security/dev/osidb-ops"
            dest: "/home/{{ user }}/prodsec/osidb-ops"
            accept_hostkey: yes
            key_file: "/home/{{ user }}/.ssh/id_rsa"
          become_user: "{{ user }}"
        - name: get new .sfm2clientrc stats
          stat:
            path: "/home/{{ user }}/data/config/dot-sfm2clientrc"
          register: new_sfm2clientrc
        - name: setup .sfm2clientrc
          file:
            src: "/home/{{ user }}/data/config/dot-sfm2clientrc"
            dest: "/home/{{ user }}/.sfm2clientrc"
            state: link
            force: true
          become_user: "{{ user }}"
          when: new_sfm2clientrc.stat.exists == true
      rescue:
        - name: report failure
          debug:
            msg: "prodsec repo failure - check VPN connection"

    - name: install stuff from prodsec repo
      block:
        - name: install prodsec repo
          dnf:
            name: https://prodsec.redhat.com/yum/prodsec-repo-latest.all.noarch.rpm
            state: present
            disable_gpg_check: true
      rescue:
        - name: report failure
          debug:
            msg: "prodsec repo failure - check VPN connection"
    - name: install development stuff
      dnf:
        name:
          - podman-compose
          - glibc-devel
          - libcap-devel
          - postgresql
          - postgresql-devel
          - krb5-devel
          - black
          - tox
          - gitk
          - sqlitebrowser
          - rpmdevtools
          - vdbqb
        state: present

    # TODO this got broken
    # - name: network proxy setup
    #   dconf:
    #     key: "{{ item.key }}"
    #     value: "{{ item.val }}"
    #     state: present
    #   become_user: "{{ user }}"
    #   loop:
    #     - key: "/org/gnome/system/proxy/mode"
    #       val: "auto"
    #     - key: "/org/gnome/system/proxy/autoconfig-url"
    #       val: "https://gitlab.corp.redhat.com/pac/proxy-pac/-/raw/main/proxy.pac"

- name: osidb setup
  import_playbook: ansible-osidb.yml

- name: sfm2 setup
  import_playbook: ansible-sfm2.yml

- name: assembler setup
  import_playbook: ansible-assembler.yml
