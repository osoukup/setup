# RH PS work setup playbook
#
#   ansible-prodsec.yml
---
- name: prodsec setup
  hosts: all
  tasks:
    - name: check mandatory variables are defined
      assert:
        that:
          - user is defined

    - name: create ~/prodsec
      file:
        path: "/home/{{ user }}/prodsec"
        state: directory
      become_user: "{{ user }}"
    - name: create ~/prodsec-people
      file:
        path: "/home/{{ user }}/prodsec-people"
        state: directory
      become_user: "{{ user }}"

    - name: setup prodsec aliases
      blockinfile:
        path: "/home/{{ user }}/.bashrc"
        marker: "# {mark} prodsec ANSIBLE MANAGED BLOCK"
        block: |
          # sfm2 config file
          export SFM2_SERVER_CONFIG=~/sfm2/instance/development.ini
          # DevOps tools shortcuts
          alias asm-source="source ~/prodsec/assembler/venv/bin/activate"
          alias retrocat-source="source ~/prodsec/retrocat/venv/bin/activate"
          alias sfm2-db="sqlitebrowser ~/sfm2/instance/sfm2-database.sqlite"
          alias sfm2-db-clear="rm ~/sfm2/instance/sfm2-database.sqlite"
          alias sfm2-shell="(sfm2-source && python ~/sfm2/sfm2/shell.py)"
          alias sfm2-source="source ~/sfm2/venv/bin/activate ; source ~/sfm2/cli/sfm2-completion.bash"
          alias sfm2-activate="~/data/tools/sfm2-activate.sh"
          alias sfm2-deactivate="~/data/tools/sfm2-deactivate.sh"
          alias sfm2-instance-switch="~/data/tools/instance-switch.sh"
          alias sfm2-server="(sfm2-source && sfm-server --log-level=debug)"
          alias sfm2-taskd="(sfm2-source && sfm-taskd --debug)"
          alias sfm2-log-server="(less +F ~/sfm2/instance/logs/sfm2-server.log)"
          alias sfm2-log-taskd="(less +F ~/sfm2/instance/logs/sfm2-taskd.log)"
          alias sfm2-log-gunicorn="(less +F ~/sfm2/instance/logs/gunicorn-error.log)"
          alias vdb="psql -h virtualdb.engineering.redhat.com -p 5432 -U srt -d srt"

    # setup VPN - partially
    - name: install NetworkManager-openvpn
      yum:
        name: NetworkManager-openvpn
        state: present
    - name: install NetworkManager-openvpn-gnome
      yum:
        name: NetworkManager-openvpn-gnome
        state: present
    # TODO install the RPMs from the following URLs manually
    # https://redhat.service-now.com/sys_attachment.do?sys_id=dea078f41bc9d4104cec766dcc4bcba0
    # https://redhat.service-now.com/sys_attachment.do?sys_id=9aa078f41bc9d4104cec766dcc4bcba2

    # setup Kerberos
    - name: install krb5-workstation
      yum:
        name: krb5-workstation
        state: present
    - name: setup Kerberos config
      copy:
        src: "/home/{{ user }}/data/config/krb5.conf"
        dest: "/etc/krb5.conf"
        mode: "0644"

    - name: install git
      yum:
        name: git
        state: present

    # TODO clone repositories
    # assembler           : git clone git@git.prodsec.redhat.com:devops/assembler.git
    # checklists          : git clone git@git.prodsec.redhat.com:prodsec/checklists.git
    # dashboard           : git clone git@git.prodsec.redhat.com:devops/dashboard.git
    # product-definitions : git clone git@git.prodsec.redhat.com:prodsec/product-definitions.git
    # ps-constants        : git clone git@git.prodsec.redhat.com:devops/ps-constants.git
    # public-slide-decks  : git clone git@git.prodsec.redhat.com:prodsec/public-slide-decks.git
    # retrocat            : git clone git@git.prodsec.redhat.com:devops/retrocat.git
    # sfm2                : git clone git@git.prodsec.redhat.com:devops/sfm2.git
    # xenuti-internal     : git clone git@git.prodsec.redhat.com:devops/xenuti-internal.git
    - name: create ~/prodsec/sfm2
      file:
        path: "/home/{{ user }}/prodsec/sfm2"
        state: directory
      become_user: "{{ user }}"
    - name: setup ~/sfm2 symlink
      file:
        src: "/home/{{ user }}/prodsec/sfm2"
        dest: "/home/{{ user }}/sfm2"
        state: link
        force: true
      become_user: "{{ user }}"
    - name: get new .sfm2clientrc stats
      stat:
        path: "/home/{{ user }}/data/config/dot-sfm2clientrc"
      register: new_sfm2clientrc
    - name: setup .sfm2clientrc
      file:
        src: "/home/{{ user }}/data/config/dot-sfm2clientrc"
        dest: "/home/{{ user }}/.sfm2clientrc"
        state: link
        force: true
      become_user: "{{ user }}"
      when: new_sfm2clientrc.stat.exists == true

    # HexChat
    - name: install hexchat
      yum:
        name: hexchat
        state: present
    - name: create ~/.config/hexchat
      file:
        path: "/home/{{ user }}/.config/hexchat"
        state: directory
      become_user: "{{ user }}"
    - name: get new hexchat config stats
      stat:
        path: "/home/{{ user }}/data/config/servlist.conf"
      register: new_hexchat
    - name: setup hexchat config
      file:
        src: "/home/{{ user }}/data/config/servlist.conf"
        dest: "/home/{{ user }}/.config/hexchat/servlist.conf"
        state: link
        force: true
      become_user: "{{ user }}"
      when: new_hexchat.stat.exists == true

    - name: install development stuff
      yum:
        name:
          - gcc
          - glibc-devel
          - libcap-devel
          - postgresql-devel
          - krb5-devel
          - black
          - tox
          - gitk
          - sqlitebrowser
          - rpmdevtools
        state: present
    - name: install stuff from prodsec repo
      block:
        - name: install prodsec repo
          yum:
            name: https://prodsec.redhat.com/yum/prodsec-repo-latest.all.noarch.rpm
            state: present
        - name: install rh-signing-tools-lite
          yum:
            name: rh-signing-tools-lite
            state: present
      rescue:
        - name: report failure
          debug:
            message: "prodsec repo failure"
